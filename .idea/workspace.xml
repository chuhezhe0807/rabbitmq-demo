<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="bb8043a3-a29c-47c2-925c-8f7920c437ea" name="Changes" comment="RabbitMq 死信的产生和处理方式;&#10;· 注意：如果监听了死信队列，消费者端重新启动后已经持久化处理的死信会被消费掉;">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/consumer/src/main/java/com/chuhezhe/mq/listener/MyMessageListener.java" beforeDir="false" afterPath="$PROJECT_DIR$/consumer/src/main/java/com/chuhezhe/mq/listener/MyMessageListener.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/model/src/main/java/com/chuhezhe/mq/Constants.java" beforeDir="false" afterPath="$PROJECT_DIR$/model/src/main/java/com/chuhezhe/mq/Constants.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/producer/src/test/java/com/chuhezhe/mq/ProducerTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/producer/src/test/java/com/chuhezhe/mq/ProducerTest.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/笔记相关/note.txt" beforeDir="false" afterPath="$PROJECT_DIR$/笔记相关/note.txt" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Interface" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="MavenImportPreferences">
    <option name="generalSettings">
      <MavenGeneralSettings>
        <option name="mavenHome" value="$PROJECT_DIR$/../../apache-maven-3.8.8" />
        <option name="userSettingsFile" value="D:\WorkSpace_BackEnd\apache-maven-3.8.8\conf\settings.xml" />
      </MavenGeneralSettings>
    </option>
  </component>
  <component name="ProjectId" id="2sWpgEOPoJSy9mbeCtEdIxrmrzq" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "RequestMappingsPanelOrder0": "0",
    "RequestMappingsPanelOrder1": "1",
    "RequestMappingsPanelWidth0": "75",
    "RequestMappingsPanelWidth1": "75",
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
    "WebServerToolWindowFactoryState": "false",
    "jdk.selected.JAVA_MODULE": "17",
    "last_opened_file_path": "D:/WorkSpace_BackEnd/IdeaProjects/cloud-demo",
    "nodejs_package_manager_path": "npm",
    "project.structure.last.edited": "Project",
    "project.structure.proportion": "0.0",
    "project.structure.side.proportion": "0.0",
    "settings.editor.selected.configurable": "MavenSettings",
    "spring.configuration.checksum": "46650d0218f3304129f8b247e1ac6d75",
    "vue.rearranger.settings.migration": "true"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="D:\WorkSpace_BackEnd\IdeaProjects\rabbitmq-demo\笔记相关" />
    </key>
  </component>
  <component name="RunDashboard">
    <option name="configurationTypes">
      <set>
        <option value="SpringBootApplicationConfigurationType" />
      </set>
    </option>
  </component>
  <component name="RunManager" selected="JUnit.ProducerTest.test06DelayMessageByPlugins">
    <configuration name="ProducerTest.test03Timeout" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="producer" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.chuhezhe.mq.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="com.chuhezhe.mq" />
      <option name="MAIN_CLASS_NAME" value="com.chuhezhe.mq.ProducerTest" />
      <option name="METHOD_NAME" value="test03Timeout" />
      <option name="TEST_OBJECT" value="method" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ProducerTest.test05" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="producer" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.chuhezhe.mq.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="com.chuhezhe.mq" />
      <option name="MAIN_CLASS_NAME" value="com.chuhezhe.mq.ProducerTest" />
      <option name="METHOD_NAME" value="test05" />
      <option name="TEST_OBJECT" value="method" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ProducerTest.test06DelayMessageByPlugins" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="producer" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.chuhezhe.mq.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="com.chuhezhe.mq" />
      <option name="MAIN_CLASS_NAME" value="com.chuhezhe.mq.ProducerTest" />
      <option name="METHOD_NAME" value="test06DelayMessageByPlugins" />
      <option name="TEST_OBJECT" value="method" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ConsumerMainApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" temporary="true" nameIsGenerated="true">
      <option name="ACTIVE_PROFILES" />
      <module name="consumer" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="com.chuhezhe.mq.ConsumerMainApplication" />
      <option name="UPDATE_ACTION_UPDATE_POLICY" value="UpdateClassesAndResources" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.chuhezhe.mq.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ProducerMainApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" temporary="true" nameIsGenerated="true">
      <module name="producer" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="com.chuhezhe.mq.ProducerMainApplication" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.chuhezhe.mq.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="JUnit.ProducerTest.test06DelayMessageByPlugins" />
        <item itemvalue="Spring Boot.ConsumerMainApplication" />
        <item itemvalue="JUnit.ProducerTest.test05" />
        <item itemvalue="JUnit.ProducerTest.test03Timeout" />
        <item itemvalue="Spring Boot.ProducerMainApplication" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="bb8043a3-a29c-47c2-925c-8f7920c437ea" name="Changes" comment="" />
      <created>1738581294070</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1738581294070</updated>
      <workItem from="1738581296928" duration="3533000" />
      <workItem from="1738584874594" duration="19602000" />
    </task>
    <task id="LOCAL-00001" summary="RabbitMq 简单示例;">
      <created>1738589279219</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1738589279219</updated>
    </task>
    <task id="LOCAL-00002" summary="RabbitMq 生产者端通过ConfirmCallback和ReturnsCallback实现消息的确认;&#10;· ConfirmCallback中如果消息发送到交换机成功则ack为true，否则为false;&#10;· returnedMessage 消息发送到队列失败才会调用这个方法;">
      <created>1738640748227</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1738640748227</updated>
    </task>
    <task id="LOCAL-00003" summary="RabbitMq 消息可靠性，备份交换机;&#10;· 可以再创建交换机是设置备份交换机（&#10;Add&#9;Alternate exchange）同时为备份交换机绑定队列，在消息成功发送到交换机后，但是没能找到匹配的路由键时，将这条消息发送给备份交换机，进入备份交换机的消息队列。;&#10;· 当备份交换机队列中出现消息时，就知道被备份的交换机出现问题了，可以用作告警使用;">
      <created>1738646350127</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1738646350127</updated>
    </task>
    <task id="LOCAL-00004" summary="RabbitMq 实现消息可靠性，生产者端、消费者端和rabbitmq服务相互配合实现;&#10;· 生产者端保证和监控消息发送到消息队列上，如果失败作出处理或者告警;&#10;· rabbitmq服务将消息持久化到硬盘上，哪怕服务器重启消息也不会丢失;&#10;· 消费者端 rabbitmq.listener.simple.acknowledge-mode = manual，把消息确认改为手动确认，进而在处理消息时调用 channel.basicAck、basicNack 返回ack或nack消息，实现消息的确认或者重试重新发送一条消息;">
      <created>1738659507107</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1738659507107</updated>
    </task>
    <task id="LOCAL-00005" summary="RabbitMq 消息超时 创建队列时设置参数x-message-ttl 单位为毫秒;&#10;· 如果消费端没有把消息从消息队列中取走，那么消息就会在队列中积压，最终可能导致rabbitmq存储空间耗尽，所以需要给消息设定一个过期时间，超过这个时间没有被取走的消息就会被删除;&#10;· 队列超时时间（队列中所有消息共同的超时时间），消息超时时间（单个消息的）;">
      <created>1738673973716</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1738673973716</updated>
    </task>
    <task id="LOCAL-00006" summary="RabbitMq 死信的产生和处理方式;&#10;· 注意：如果监听了死信队列，消费者端重新启动后已经持久化处理的死信会被消费掉;">
      <created>1738679399924</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1738679399924</updated>
    </task>
    <option name="localTasksCounter" value="7" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.History.Properties">
    <option name="COLUMN_ID_ORDER">
      <list>
        <option value="Default.Root" />
        <option value="Default.Author" />
        <option value="Default.Date" />
        <option value="Default.Subject" />
        <option value="Space.CommitStatus" />
      </list>
    </option>
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="RabbitMq 简单示例;" />
    <MESSAGE value="RabbitMq 生产者端通过ConfirmCallback和ReturnsCallback实现消息的确认;&#10;· 构建好 MQProducerAckConfig 配置类后还需要将其设置到rabbitTemplate中才会生效，rabbitTemplate.setConfirmCallback(this);&#10;· ConfirmCallback中如果消息发送到交换机成功则ack为true，否则为false;&#10;· returnedMessage 消息发送到队列失败才会调用这个方法;" />
    <MESSAGE value="RabbitMq 消息可靠性，备份交换机;&#10;· 可以再创建交换机是设置备份交换机（&#10;Add&#9;Alternate exchange）同时为备份交换机绑定队列，在消息成功发送到交换机后，但是没能找到匹配的路由键时，将这条消息发送给备份交换机，进入备份交换机的消息队列。;&#10;· 当备份交换机队列中出现消息时，就知道被备份的交换机出现问题了，可以用作告警使用;" />
    <MESSAGE value="RabbitMq 实现消息可靠性，生产者端、消费者端和rabbitmq服务相互配合实现;&#10;· 生产者端保证和监控消息发送到消息队列上，如果失败作出处理或者告警;&#10;· rabbitmq服务将消息持久化到硬盘上，哪怕服务器重启消息也不会丢失;&#10;· 消费者端 rabbitmq.listener.simple.acknowledge-mode = manual，把消息确认改为手动确认，进而在处理消息时调用 channel.basicAck、basicNack 返回ack或nack消息，实现消息的确认或者重试重新发送一条消息;" />
    <MESSAGE value="RabbitMq 消息超时 创建队列时设置参数x-message-ttl 单位为毫秒;&#10;· 如果消费端没有把消息从消息队列中取走，那么消息就会在队列中积压，最终可能导致rabbitmq存储空间耗尽，所以需要给消息设定一个过期时间，超过这个时间没有被取走的消息就会被删除;&#10;· 队列超时时间（队列中所有消息共同的超时时间），消息超时时间（单个消息的）;" />
    <MESSAGE value="RabbitMq 死信的产生和处理方式;&#10;· 注意：如果监听了死信队列，消费者端重新启动后已经持久化处理的死信会被消费掉;" />
    <option name="LAST_COMMIT_MESSAGE" value="RabbitMq 死信的产生和处理方式;&#10;· 注意：如果监听了死信队列，消费者端重新启动后已经持久化处理的死信会被消费掉;" />
  </component>
</project>